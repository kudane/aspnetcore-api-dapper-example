@page "/genre/{id:int}"

@using System.Net.Http
@using Domain.Entity
@using Domain.Entity.Produces
@inject HttpClient Http

<h1>Movie List</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (_result.Items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Subject</th>
                <th>Summary</th>
                <th>Ratting</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var movie in _result.Items)
            {
                <tr>
                    <td>@movie.Subject</td>
                    <td>@movie.Summary</td>
                    <td>@movie.Ratting</td>
                </tr>
            }
        </tbody>
    </table>

    <nav aria-label="Page navigation example">
        <ul class="pagination">
            <li class="page-item @PreviousDisabledClass"><a class="page-link" href="#">Previous</a></li>

            @for (var i = 1; i <= _result.TotalPages; i++)
            {
                var pageNumber = i;

                if (currentPage == pageNumber)
                {
                    <li class="page-item active">
                        <span style="cursor: pointer;" class="page-link" @onclick="@(async () => await OnClickPage(pageNumber))">@i</span>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <span style="cursor: pointer;" class="page-link" @onclick="@(async () => await OnClickPage(pageNumber))">@i</span>
                    </li>
                }
            }

            <li class="page-item"><a class="page-link" href="#">Next</a></li>
        </ul>
    </nav>
}

@code {
    [Parameter]
    public int Id { get; set; }

    const int pagesize = 5;
    private int pagenumber = 1;
    private int currentPage = 1;

    private PageResult<Movie> _result = new PageResult<Movie>();

    private bool isPreviousDisabled = false;

    private string PreviousDisabledClass => isPreviousDisabled ? "disabled" : null;

    protected override async Task OnParametersSetAsync()
    {
        await GetMoviesAync();
    }

    private async Task OnClickPage(int number)
    {
        pagenumber = number;

        await GetMoviesAync();
    }

    private async Task GetMoviesAync()
    {
        var url = $"api/genre/{Id}/movies?pagesize={pagesize}&pagenumber={pagenumber}";

        _result = await Http.GetJsonAsync<PageResult<Movie>>(url);

        isPreviousDisabled = _result.CurrentPage == 1;

        currentPage = _result.CurrentPage;
    }
}
